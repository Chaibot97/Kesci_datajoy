print_every_n = 50
)
View(xgb.importance(colnames(mt_xgb$train), model_xgb))
dt_full <- copy(dt_full_copy)
# Salary / division average
dt_full[, sal_avg_ratio_by_div := salary / mean(salary), by = "division"]
# Salary / time company
dt_full[, sal_comp_ratio := salary / time_spend_company]
# Salary / num project
dt_full[, sal_proj_ratio := salary / number_project]
# Salary / eval
dt_full[, sal_eval_ratio := salary / last_evaluation]
# Salary / time month
dt_full[, sal_time_ratio := salary / average_monthly_hours]
# Pkg / division average
dt_full[, pkg_avg_ratio_by_div := package / mean(package), by = "division"]
# Pkg / num project
dt_full[, pkg_proj_ratio := package / number_project]
# Eval / time company
dt_full[, eval_comp_ratio := last_evaluation / time_spend_company]
# Eval / time month
dt_full[, eval_time_ratio := last_evaluation / average_monthly_hours]
meta[["feat_num"]] <- c(
meta$feat_num,
"sal_avg_ratio_by_div",
"sal_comp_ratio",
"sal_proj_ratio",
"sal_eval_ratio",
"sal_time_ratio",
"pkg_avg_ratio_by_div",
"pkg_proj_ratio",
"eval_comp_ratio",
"eval_time_ratio"
) %>% unique()
# One-hot encoding for division
dt_full <- one_hot(dt_full, "division")
# Partition to train-test
dt_full <- split(dt_full, dt_full[["setID"]])
# Prepare matrix for glmnet
meta[["feat_cat"]] <- colnames(dt_full$train)[
grep("^division_", colnames(dt_full$train))
]
mt_glmnet <- lapply(
dt_full,
function(dt, feat) {
as.matrix(dt[, feat, with = FALSE])
},
feat = c(meta$feat_cat, meta$feat_num)
)
# Meta data
meta <- list(
match_key = "id",
target = "satisfaction_level",
feat_num = c(
"last_evaluation",
"number_project",
"average_monthly_hours",
"time_spend_company",
"Work_accident",
"promotion_last_5years",
"salary",
"package"
),
feat_cat = c(
"division"
)
)
# Loading data
#   Combine train test and convert cat data to factor
dt_full <- rbindlist(
list(
train = fread(file = "../data/train.csv", key = "id"),
test = fread(file = "../data/test.csv", key = "id")
),
use.names = TRUE,
fill = TRUE,
idcol = "setID"
)
# Salary and package are ordered
#   convert to numerical data
dt_full[
, salary := as.numeric(
factor(salary, levels = c("low", "medium", "high"), ordered = TRUE)
)
]
dt_full[
, package := as.numeric(
factor(package, levels = rev(c('a', 'b', 'c', 'd', 'e')), ordered = TRUE)
)
]
dt_full[, division := factor(division)]
dt_full_copy <- copy(dt_full)
# Salary / division average
dt_full[, sal_avg_ratio_by_div := salary / mean(salary), by = "division"]
# Salary / time company
dt_full[, sal_comp_ratio := salary / time_spend_company]
# Salary / num project
dt_full[, sal_proj_ratio := salary / number_project]
# Salary / eval
dt_full[, sal_eval_ratio := salary / last_evaluation]
# Salary / time month
dt_full[, sal_time_ratio := salary / average_monthly_hours]
# Pkg / division average
dt_full[, pkg_avg_ratio_by_div := package / mean(package), by = "division"]
# Pkg / num project
dt_full[, pkg_proj_ratio := package / number_project]
# Eval / time company
dt_full[, eval_comp_ratio := last_evaluation / time_spend_company]
# Eval / time month
dt_full[, eval_time_ratio := last_evaluation / average_monthly_hours]
meta[["feat_num"]] <- c(
meta$feat_num,
"sal_avg_ratio_by_div",
"sal_comp_ratio",
"sal_proj_ratio",
"sal_eval_ratio",
"sal_time_ratio",
"pkg_avg_ratio_by_div",
"pkg_proj_ratio",
"eval_comp_ratio",
"eval_time_ratio"
) %>% unique()
# One-hot encoding for division
dt_full <- one_hot(dt_full, "division")
# Partition to train-test
dt_full <- split(dt_full, dt_full[["setID"]])
# Prepare matrix for glmnet
meta[["feat_cat"]] <- colnames(dt_full$train)[
grep("^division_", colnames(dt_full$train))
]
mt_glmnet <- lapply(
dt_full,
function(dt, feat) {
as.matrix(dt[, feat, with = FALSE])
},
feat = c(meta$feat_cat, meta$feat_num)
)
cv_glmnet <- cv.glmnet(mt_glmnet$train, dt_full$train[[meta$target]])
plot(cv_glmnet)
model_glmnet <- glmnet(
mt_glmnet$train,
dt_full$train[[meta$target]],
alpha = 0.2,
lambda = cv_glmnet$lambda.1se
)
dt_full$train[, margin_glmnet := predict(model_glmnet, mt_glmnet$train)]
dt_full$test[, margin_glmnet := predict(model_glmnet, mt_glmnet$test)]
my.mse(dt_full$train$satisfaction_level, dt_full$train$margin_glmnet)
# Create xgb.DMatrix
my.DMatrix <- function(dt, tar, feat, margin = NULL) {
mt <- as.matrix(dt[, feat, with = FALSE])
mt <- xgb.DMatrix(
data = mt,
label = dt[[tar]]
)
if (!is.null(margin))
setinfo(mt, "base_margin", dt[[margin]])
return(mt)
}
mt_xgb <- lapply(
dt_full,
my.DMatrix,
tar = meta$target,
feat = c(meta$feat_num),
margin = "margin_glmnet"
)
args_xgb <- list(
booster = "dart",
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.05,
max_depth = 12,
max_delta_step = 1,
subsample = 0.5,
colsample_bytree = 0.6,
rate_drop = 0.1,
skip_drop = 0.1,
min_child_weight = 25,
gamma = 0.3,
lambda = 75
)
cv_xgb <- xgb.cv(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
verbose = 1,
print_every_n = 50,
nfold = 5,
showsd = TRUE
)
args_xgb <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.05,
max_depth = 12,
max_delta_step = 1,
subsample = 0.5,
colsample_bytree = 0.6,
min_child_weight = 25,
gamma = 0.3,
lambda = 75
)
cv_xgb <- xgb.cv(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
verbose = 1,
print_every_n = 50,
nfold = 5,
showsd = TRUE
)
model_xgb <- xgb.train(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
watchlist = list(train = mt_xgb$train),
verbose = 1,
print_every_n = 50
)
?xgb.ggplot.importance
importance_xgb <- xgb.importance(colnames(mt_xgb$train), model_xgb)
importance_xgb_plt <- xgb.ggplot.importance(
importance_xgb,
measure = "Gain",
rel_to_first = TRUE
)
install.packages("Ckmeans.1d.dp")
importance_xgb <- xgb.importance(colnames(mt_xgb$train), model_xgb)
importance_xgb_plt <- xgb.ggplot.importance(
importance_xgb,
measure = "Gain",
rel_to_first = TRUE
)
importance_xgb_plt
View(importance_xgb)
importance_xgb_plt <- xgb.ggplot.importance(
importance_xgb,
rel_to_first = TRUE
)
importance_xgb_plt
0.177199^2
dt_full$train[, margin_xgb := predict(
model_xgb, mt_xgb$train, ntreelimit = model_xgb$best_ntreelimit
)]
dt_full$test[, margin_xgb := predict(
model_xgb, mt_xgb$test, ntreelimit = model_xgb$best_ntreelimit
)]
my.mse <- function(y, y_hat) {
mean((y - y_hat)^2)
}
my.mse(dt_full$train$satisfaction_level, dt_full$train$margin_xgb)
args_xgb <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.05,
max_depth = 13,
max_delta_step = 1,
subsample = 0.5,
colsample_bytree = 0.6,
min_child_weight = 25,
gamma = 0.3,
lambda = 75
)
cv_xgb <- xgb.cv(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
verbose = 1,
print_every_n = 50,
nfold = 5,
showsd = TRUE
)
library(xgboost)
library(ggplot2)
library(data.table)
library(magrittr)
library(mltools)
library(glmnet)
args_xgb <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.05,
max_depth = 13,
max_delta_step = 1,
subsample = 0.5,
colsample_bytree = 0.6,
min_child_weight = 25,
gamma = 0.3,
lambda = 75
)
cv_xgb <- xgb.cv(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
verbose = 1,
print_every_n = 50,
nfold = 5,
showsd = TRUE
)
# Create xgb.DMatrix
my.DMatrix <- function(dt, tar, feat, margin = NULL) {
mt <- as.matrix(dt[, feat, with = FALSE])
mt <- xgb.DMatrix(
data = mt,
label = dt[[tar]]
)
if (!is.null(margin))
setinfo(mt, "base_margin", dt[[margin]])
return(mt)
}
mt_xgb <- lapply(
dt_full,
my.DMatrix,
tar = meta$target,
feat = c(meta$feat_num),
margin = "margin_glmnet"
)
cv_xgb <- xgb.cv(
params = args_xgb,
data = mt_xgb$train,
nrounds = 512,
early_stopping_rounds = 50,
maximize = FALSE,
verbose = 1,
print_every_n = 50,
nfold = 5,
showsd = TRUE
)
args_xgb <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.05,
max_depth = 13,
max_delta_step = 1,
subsample = 0.5,
colsample_bytree = 0.6,
min_child_weight = 25,
gamma = 0.35,
lambda = 75
)
model_xgb <- xgb.train(
params = args_xgb,
data = mt_xgb$train,
nrounds = 1024,
early_stopping_rounds = 50,
maximize = FALSE,
watchlist = list(train = mt_xgb$train),
verbose = 1,
print_every_n = 50
)
dt_full$train[, margin_xgb := predict(
model_xgb, mt_xgb$train, ntreelimit = model_xgb$best_ntreelimit
)]
dt_full$test[, margin_xgb := predict(
model_xgb, mt_xgb$test, ntreelimit = model_xgb$best_ntreelimit
)]
my.mse <- function(y, y_hat) {
mean((y - y_hat)^2)
}
my.mse(dt_full$train$satisfaction_level, dt_full$train$margin_xgb)
0.177^2
fwrite(dt_full$test[, .(id, satisfaction_level = margin_xgb)], "test.csv")
install.packages("grplasso")
install.packages("doParallel")
?glmnet
library(glmnet)
?glmnet.fit
library(xgboost)
library(ggplot2)
library(data.table)
library(magrittr)
library(mltools)
library(glmnet)
# Meta data
meta <- list(
match_key = "id",
target = "satisfaction_level",
feat_num = c(
"last_evaluation",
"number_project",
"average_monthly_hours",
"time_spend_company",
"Work_accident",
"promotion_last_5years",
"salary",
"package"
),
feat_cat = c(
"division"
)
)
# Loading data
#   Combine train test and convert cat data to factor
dt_full <- rbindlist(
list(
train = fread(file = "../data/train.csv", key = "id"),
test = fread(file = "../data/test.csv", key = "id")
),
use.names = TRUE,
fill = TRUE,
idcol = "setID"
)
# Salary and package are ordered
#   convert to numerical data
dt_full[
, salary := as.numeric(
factor(salary, levels = c("low", "medium", "high"), ordered = TRUE)
)
]
dt_full[
, package := as.numeric(
factor(package, levels = rev(c('a', 'b', 'c', 'd', 'e')), ordered = TRUE)
)
]
dt_full[, division := factor(division)]
dt_full_copy <- copy(dt_full)
# Salary / division average
dt_full[, sal_avg_ratio_by_div := salary / mean(salary), by = "division"]
# Salary / time company
dt_full[, sal_comp_ratio := salary / time_spend_company]
# Salary / num project
dt_full[, sal_proj_ratio := salary / number_project]
# Salary / eval
dt_full[, sal_eval_ratio := salary / last_evaluation]
# Salary / time month
dt_full[, sal_time_ratio := salary / average_monthly_hours]
# Pkg / division average
dt_full[, pkg_avg_ratio_by_div := package / mean(package), by = "division"]
# Pkg / num project
dt_full[, pkg_proj_ratio := package / number_project]
# Eval / time company
dt_full[, eval_comp_ratio := last_evaluation / time_spend_company]
# Eval / time month
dt_full[, eval_time_ratio := last_evaluation / average_monthly_hours]
meta[["feat_num"]] <- c(
meta$feat_num,
"sal_avg_ratio_by_div",
"sal_comp_ratio",
"sal_proj_ratio",
"sal_eval_ratio",
"sal_time_ratio",
"pkg_avg_ratio_by_div",
"pkg_proj_ratio",
"eval_comp_ratio",
"eval_time_ratio"
) %>% unique()
# One-hot encoding for division
dt_full <- one_hot(dt_full, "division")
# Partition to train-test
dt_full <- split(dt_full, dt_full[["setID"]])
# Prepare matrix for glmnet
meta[["feat_cat"]] <- colnames(dt_full$train)[
grep("^division_", colnames(dt_full$train))
]
mt_glmnet <- lapply(
dt_full,
function(dt, feat) {
as.matrix(dt[, feat, with = FALSE])
},
feat = c(meta$feat_cat, meta$feat_num)
)
cv_glmnet <- cv.glmnet(
mt_glmnet$train,
dt_full$train[[meta$target]],
alpha = 0.9
)
plot(cv_glmnet)
cv_glmnet <- cv.glmnet(
mt_glmnet$train,
dt_full$train[[meta$target]],
alpha = 0.1
)
plot(cv_glmnet)
cv_glmnet <- cv.glmnet(
mt_glmnet$train,
dt_full$train[[meta$target]],
alpha = 0.95
)
plot(cv_glmnet)
model_glmnet <- glmnet(
mt_glmnet$train,
dt_full$train[[meta$target]],
alpha = 0.95,
lambda = cv_glmnet$lambda.1se
)
dt_full$train[, margin_glmnet := predict(model_glmnet, mt_glmnet$train)]
dt_full$test[, margin_glmnet := predict(model_glmnet, mt_glmnet$test)]
my.mse(dt_full$train$satisfaction_level, dt_full$train$margin_glmnet)
library(xgboost)
?predict.xgb.Booster
install.packages("doParallel")
install.packages("EIX")
install.packages('ggiraph')
install.packages('systemfonts')
install.packages('ggiraph')
install.packages("EIX")
install.packages("bigmemory")
install.packages("doParallel", lib = "C:\\Users\\lgfz1\\Documents\\R\\win-library\\upload")
install.packages("bigmemory", lib = "C:\\Users\\lgfz1\\Documents\\R\\win-library\\upload")
install.packages("grplasso", lib = "C:\\Users\\lgfz1\\Documents\\R\\win-library\\upload")
install.packages("EXI", lib = "C:\\Users\\lgfz1\\Documents\\R\\win-library\\upload")
install.packages("EIX", lib = "C:\\Users\\lgfz1\\Documents\\R\\win-library\\upload")
